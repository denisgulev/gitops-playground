name: Deploy to EC2

# on:
#   workflow_dispatch:  # manual dispatch
on:
  push:
    branches:
      - main
    paths:
      - 'backend/app/deployment-version.txt'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # - name: Get latest Git tag matching 'v*'
    #   id: get_tag
    #   run: |
    #     git fetch --tags
    #     TAG=$(git tag | grep '^v' | sort -V | tail -n 1)
    #     echo "TAG=$TAG" >> $GITHUB_OUTPUT
    #     echo "Latest TAG: $TAG"

    - name: Read version tag from file
      id: get_tag
      run: |
        TAG=$(tail -n 1 backend/app/deployment-version.txt)
        echo "TAG=$TAG" >> $GITHUB_OUTPUT

    - name: Get EIP from SSM Parameter Store
      id: get_eip
      run: |
        EIP=$(aws ssm get-parameter --name "/infra/ec2/public_dns" --query "Parameter.Value" --output text)
        echo "EIP=$EIP" >> $GITHUB_OUTPUT
        echo "Fetched EC2 Host from SSM: ${EIP}"
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ steps.get_eip.outputs.EIP }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          IMAGE=${{ secrets.DOCKER_USERNAME }}/flask-app:${{ steps.get_tag.outputs.TAG }}
          TEMP_CONTAINER="flask-app-new"
          CURRENT_CONTAINER="flask-app"

          echo "Pulling image: $IMAGE"
          docker pull $IMAGE

          echo "Starting temporary container for validation..."
          docker run -d --name $TEMP_CONTAINER -p 8000:8000 -v /var/log/flask:/var/log/flask $IMAGE

          echo "Waiting for app to start..."
          sleep 5

          echo "Performing health check..."
          if curl -s --max-time 30 http://localhost:8000/api/hello | grep -q 'Hello'; then
            echo "‚úÖ Health check passed. Rolling forward..."

            if docker ps -a --format '{{.Names}}' | grep -q "^$CURRENT_CONTAINER$"; then
              docker stop $CURRENT_CONTAINER
              docker rm $CURRENT_CONTAINER
            fi

            docker stop $TEMP_CONTAINER
            docker rename $TEMP_CONTAINER $CURRENT_CONTAINER
            docker start $CURRENT_CONTAINER
            echo "‚úÖ Deployed and running: $CURRENT_CONTAINER"
          else
            echo "‚ùå Health check failed! Rolling back."
            docker stop $TEMP_CONTAINER
            docker rm $TEMP_CONTAINER
            echo "üö´ Deployment aborted. Old container remains running."
            exit 1
          fi